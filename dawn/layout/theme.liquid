{% comment %} The theme.liquid file is the master template for a Shopify theme. It provides the overall structure and layout for every page on the store. {% endcomment %}
<!doctype html>
{% comment %} class="no-js": This class is a common practice for progressive enhancement. It's a CSS hook used by developers to handle situations where JavaScript is not enabled or supported by the user's browser. Below in the theme.liquid file, there's a small JavaScript snippet that replaces this class with class="js" once the page loads and JavaScript is confirmed to be working. This allows the theme to apply different styles or behaviors based on JavaScript availability. For example, a theme might hide an element with display: none for the .no-js class and then show it with the .js class. {% endcomment %}

{% comment %} lang="{{ request.locale.iso_code }}": This attribute specifies the language of the document's content. The value is dynamically generated by Shopify's Liquid templating language. request.locale.iso_code: This Liquid object returns the ISO 639-1 language code (e.g., en, fr, de) of the current locale. This is crucial for accessibility and SEO. It helps screen readers and search engines understand the language of your content, which can improve user experience and search rankings. {% endcomment %}
<html class="no-js" lang="{{ request.locale.iso_code }}">
  <head>
    {% comment %}
      <meta charset="utf-8">: Specifies the character encoding for the HTML document. UTF-8 is a universal character set that can display almost any character from any language, making it the standard for modern web pages. Without it, special characters or non-English text might appear as garbled symbols.

      <meta name="viewport" content="width=device-width,initial-scale=1">: This is a key tag for responsive design. It instructs the browser on how to control the page's dimensions and scaling on different devices.
      width=device-width: Sets the width of the viewport to the width of the device screen.
      initial-scale=1: Sets the initial zoom level when the page is first loaded. This prevents the browser from trying to zoom out to fit the entire page width, which is a common behavior on mobile devices without this tag.

      <meta name="theme-color" content="">: This tag sets the color of the browser's theme, such as the address bar or the toolbar. The empty content="" in Dawn is a placeholder, as the actual color is often dynamically populated from the theme settings.

      <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>: This is a performance optimization tag. It tells the browser to anticipate a connection to https://cdn.shopify.com, which hosts many of the theme's assets. By "pre-connecting," the browser can save time by performing the DNS lookup and TCP handshake in advance, leading to faster loading times for assets like images and fonts.
    {% endcomment %}
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    {% comment %} if you want to change the theme color dynamically inside code {% endcomment %}
    <meta name="theme-color" content="">
    {% comment %} SEO related {% endcomment %}
    <link rel="canonical" href="{{ canonical_url }}">
    {% comment %}
      a performance optimization technique that tells the browser to pre-connect to a domain.

      How it Works: When a browser loads a webpage, it has to perform several steps to connect to a new server:
      DNS lookup: Finding the IP address for the domain name.
      TCP handshake: Establishing a secure connection.
      TLS negotiation: Securing the connection with an SSL certificate.

      Why it's Fast: By using rel="preconnect", you're telling the browser to start this process in the background, even before it needs to download any resources from that domain.
      https://cdn.shopify.com: This is a Content Delivery Network (CDN) that Shopify uses to serve assets like images, scripts, and stylesheets. Since a Shopify store will almost always load resources from this CDN, pre-connecting to it saves valuable milliseconds, which improves overall page load speed.

      crossorigin: This attribute specifies that the request will be made with CORS (Cross-Origin Resource Sharing). It's necessary for resources like fonts and certain scripts.
    {% endcomment %}
    <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>

    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | img_url: '32x32' }}">
    {%- endif -%}
    {% comment %} This Liquid code checks whether both the header and body fonts selected in the Shopify theme settings are system fonts. If both are system fonts (meaning fonts already available on the user's device), the code inside the block is skipped. If either the header or body font is not a system font (i.e., a web font that needs to be loaded from an external source, which is handled in the next block), it tells the browser to establish an early connection to Shopify's font CDN, which can speed up the loading of web fonts. {% endcomment %}
    {%- unless settings.type_header_font.system? and settings.type_body_font.system? -%}
      <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    {%- endunless -%}

    {%- comment -%}
      Preloads custom web fonts for improved performance.
      - If the body font specified in settings is not a system font, preload it as a woff2 font.
      - If the header font specified in settings is not a system font, preload it as a woff2 font.
      This ensures that custom fonts are loaded early, reducing layout shifts and improving user experience.
    {%- endcomment -%}
    {%- unless settings.type_body_font.system? -%}
      <link rel="preload" as="font" href="{{ settings.type_body_font | font_url }}" type="font/woff2" crossorigin>
    {%- endunless -%}
    {%- unless settings.type_header_font.system? -%}
      <link rel="preload" as="font" href="{{ settings.type_header_font | font_url }}" type="font/woff2" crossorigin>
    {%- endunless -%}

    {% comment %}
      The first line outputs the page_title, which is the main title for the current page—such as a product name, collection, or blog post. Next, if there are any current_tags (for example, if a user is viewing a filtered collection), it appends "– tagged" followed by a comma-separated list of those tags. This makes it clear which filters are active. Then, the code checks if the current_page is not the first page (useful for paginated content). If so, it adds "– Page X" to indicate the current page number, helping users and search engines understand the page context.

      Finally, the code checks if the page_title already contains the shop's name. If it does not, it appends "– [shop name]" to ensure the store's branding is included in the title, but avoids repeating it if it's already present. This approach creates clear, descriptive, and SEO-friendly page titles that adapt to the current page's context.
    {% endcomment %}
    <title>
      {{ page_title }}
      {%- if current_tags %} &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif -%}
      {%- if current_page != 1 %} &ndash; Page {{ current_page }}{% endif -%}
      {%- unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless -%}
    </title>

    {% if page_description %}
      <meta name="description" content="{{ page_description | escape }}">
    {% endif %}

    {% render 'meta-tags' %}
    {% comment %} Includes the global.js file and defer makes the script load after the page is loaded {% endcomment %}
    <script src="{{ 'global.js' | asset_url }}" defer="defer"></script>
    {% comment %} a special Shopify placeholder that injects additional scripts, styles, and meta tags required by Shopify apps and the platform itself. This ensures that any necessary third-party or Shopify-managed code is included in the page header automatically. {% endcomment %}
    {{ content_for_header }}

    {%- liquid
      assign body_font_bold = settings.type_body_font | font_modify: 'weight', 'bold'
      assign body_font_italic = settings.type_body_font | font_modify: 'style', 'italic'
      assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
    %}

    {% comment %}
      inject dynamic CSS into the page, allowing theme settings to control fonts, colors, and layout variables.

      Including base.css with the stylesheet_tag in your theme.liquid ensures that your main, static CSS file is loaded by the browser. This file contains the core styles for your theme and is typically generated and managed as a static asset. The {% style %} block, on the other hand, is used to inject dynamic CSS directly into the page. This dynamic CSS is generated based on your theme settings (such as fonts, colors, and layout options chosen in the Shopify theme editor). It allows the theme to use Liquid variables to output CSS custom properties and @font-face rules that reflect the current configuration of your store.
    {% endcomment %}
    {% style %}
      /* several font variants (regular, bold, italic, bold italic, and header font) are loaded using the font_face filter with font_display: 'swap'. This ensures that custom fonts are displayed as soon as they are available, improving perceived performance. */
        {{ settings.type_body_font | font_face: font_display: 'swap' }}
        {{ body_font_bold | font_face: font_display: 'swap' }}
        {{ body_font_italic | font_face: font_display: 'swap' }}
        {{ body_font_bold_italic | font_face: font_display: 'swap' }}
        {{ settings.type_header_font | font_face: font_display: 'swap' }}

        /* Inside the :root selector, a series of CSS custom properties (variables) are defined. These variables pull values from the theme’s settings, such as font families, styles, weights, color values (in RGB), gradients, and page width. This makes it easy to update the site’s appearance through the Shopify theme editor without changing the code. */
        :root {
          --font-body-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
          --font-body-style: {{ settings.type_body_font.style }};
          --font-body-weight: {{ settings.type_body_font.weight }};

          --font-heading-family: {{ settings.type_header_font.family }}, {{ settings.type_header_font.fallback_families }};
          --font-heading-style: {{ settings.type_header_font.style }};
          --font-heading-weight: {{ settings.type_header_font.weight }};

          --font-body-scale: {{ settings.body_scale | divided_by: 100.0 }};
          --font-heading-scale: {{ settings.heading_scale | times: 1.0 | divided_by: settings.body_scale }};

          --color-base-text: {{ settings.colors_text.red }}, {{ settings.colors_text.green }}, {{ settings.colors_text.blue }};
          --color-base-background-1: {{ settings.colors_background_1.red }}, {{ settings.colors_background_1.green }}, {{ settings.colors_background_1.blue }};
          --color-base-background-2: {{ settings.colors_background_2.red }}, {{ settings.colors_background_2.green }}, {{ settings.colors_background_2.blue }};
          --color-base-solid-button-labels: {{ settings.colors_solid_button_labels.red }}, {{ settings.colors_solid_button_labels.green }}, {{ settings.colors_solid_button_labels.blue }};
          --color-base-outline-button-labels: {{ settings.colors_outline_button_labels.red }}, {{ settings.colors_outline_button_labels.green }}, {{ settings.colors_outline_button_labels.blue }};
          --color-base-accent-1: {{ settings.colors_accent_1.red }}, {{ settings.colors_accent_1.green }}, {{ settings.colors_accent_1.blue }};
          --color-base-accent-2: {{ settings.colors_accent_2.red }}, {{ settings.colors_accent_2.green }}, {{ settings.colors_accent_2.blue }};
          --payment-terms-background-color: {{ settings.colors_background_1 }};

          --gradient-base-background-1: {% if settings.gradient_background_1 != blank %}{{ settings.gradient_background_1 }}{% else %}{{ settings.colors_background_1 }}{% endif %};
          --gradient-base-background-2: {% if settings.gradient_background_2 != blank %}{{ settings.gradient_background_2 }}{% else %}{{ settings.colors_background_2 }}{% endif %};
          --gradient-base-accent-1: {% if settings.gradient_accent_1 != blank %}{{ settings.gradient_accent_1 }}{% else %}{{ settings.colors_accent_1 }}{% endif %};
          --gradient-base-accent-2: {% if settings.gradient_accent_2 != blank %}{{ settings.gradient_accent_2 }}{% else %}{{ settings.colors_accent_2 }}{% endif %};

          --page-width: {{ settings.page_width | divided_by: 10 }}rem;
          --page-width-margin: {% if settings.page_width == '1600' %}2{% else %}0{% endif %}rem;
        }

        *,
        *::before,
        *::after {
          box-sizing: inherit;
        }

        html {
          box-sizing: border-box;
          font-size: calc(var(--font-body-scale) * 62.5%);
          height: 100%;
        }

        body {
          display: grid;
          grid-template-rows: auto auto 1fr auto;
          grid-template-columns: 100%;
          min-height: 100%;
          margin: 0;
          font-size: 1.5rem;
          letter-spacing: 0.06rem;
          line-height: calc(1 + 0.8 / var(--font-body-scale));
          font-family: var(--font-body-family);
          font-style: var(--font-body-style);
          font-weight: var(--font-body-weight);
        }

        @media screen and (min-width: 750px) {
          body {
            font-size: 1.6rem;
          }
        }
    {% endstyle %}
    {% comment %} includes the main CSS stylesheet. It uses the asset_url filter to generate the correct URL for the base.css file stored in your theme’s assets. The stylesheet_tag filter then wraps this URL in a proper <link rel="stylesheet"> HTML tag, which tells the browser to load and apply the styles defined in base.css. This approach ensures that your theme’s core styles are loaded efficiently and in a way that’s compatible with Shopify’s asset management system. {% endcomment %}
    {{ 'base.css' | asset_url | stylesheet_tag }}

    {% comment %} includes a CSS file for predictive search functionality based on a theme setting. If settings.predictive_search_enabled is true, it adds a <link> tag to load the component-predictive-search.css stylesheet from the theme’s assets. {% endcomment %}
    {%- if settings.predictive_search_enabled -%}
      <link
        rel="stylesheet"
        href="{{ 'component-predictive-search.css' | asset_url }}"
        media="print"
        onload="this.media='all'"
      >
    {%- endif -%}

    {% comment %} When the script executes, it proves that JavaScript is enabled and updates the class to js. {% endcomment %}
    <script>
      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
    </script>
  </head>

  <body class="gradient">
    <a class="skip-to-content-link button visually-hidden" href="#MainContent">
      {{ 'accessibility.skip_to_text' | t }}
    </a>

    {% section 'announcement-bar' %}
    {% section 'header' %}
    <main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
      {{ content_for_layout }}
    </main>

    {% section 'footer' %}

    <ul hidden>
      <li id="a11y-refresh-page-message">{{ 'accessibility.refresh_page' | t }}</li>
    </ul>

    <script>
      window.routes = {
        cart_add_url: '{{ routes.cart_add_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}',
      };

      window.cartStrings = {
        error: `{{ 'sections.cart.cart_error' | t }}`,
        quantityError: `{{ 'sections.cart.cart_quantity_error_html' | t }}`,
      };

      window.variantStrings = {
        addToCart: `{{ 'products.product.add_to_cart' | t }}`,
        soldOut: `{{ 'products.product.sold_out' | t }}`,
        unavailable: `{{ 'products.product.unavailable' | t }}`,
      };

      window.accessibilityStrings = {
        shareSuccess: `{{ 'general.share.success_message' | t }}`,
      };
    </script>

    {%- if settings.predictive_search_enabled -%}
      <script src="{{ 'predictive-search.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}
  </body>
</html>
