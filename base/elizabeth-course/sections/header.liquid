{% liquid
  if section.settings.menu.links == blank
    assign main_menu_linklist = linklists[section.settings.menu].links
  else
    assign main_menu_linklist = section.settings.menu.links
  endif
%}
{% comment %} linklists contains all the menus. If we somehow, don't find menu in the section settings, then get the menu from linklists. This is just a safety measure or fallback.  {% endcomment %}

<div class="relative bg-white" x-data="{ mobileMenuOpen: false, searchBarOpen: false }" x-cloak>
  <div class="mx-auto px-4 sm:px-6">
    <div class="flex justify-center items-center py-6 md:justify-start md:space-x-10">
      <!-- STORE NAME / STORE LOGO -->
      <div class="flex justify-start lg:flex-1 truncate">
        <h1 class="text-xl font-bold truncate">{{ shop.name }}</h1>
      </div>

      <!-- MOBILE MENU ICON -->
      <div class="-mr-2 -my-2 ml-3 md:hidden">
        <button
          x-on:click="mobileMenuOpen = true"
          type="button"
          class="bg-white p-2 inline-flex items-center justify-center focus:outline-none"
        >
          {% render 'icon-menu' %}
        </button>
      </div>
      <!-- NAVIGATION MENU -->
      {% comment %} render the navigation menu considering nested menu {% endcomment %}
      <nav class="hidden md:flex space-x-10">
        {% for link in main_menu_linklist %}
          {% if link.links != blank %}
            {% assign link_handle = link.handle | replace: '-', '_' %}
            {% comment %}
              Nested menu title. Setting initial alpine js variable to false. Then on button click, toggle that value.
            {% endcomment %}
            <div class="relative" x-data="{ {{ link_handle }}: false }">
              <button
                type="button"
                x-on:click="{{ link_handle }} = ! {{ link_handle }}"
                class="inline-flex items-center"
              >
                {{ link.title }}
                {% render 'icon-dropdown' %}
              </button>

              <!-- nested menu childlinks -->
              <div
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0 translate-y-3"
                x-transition:enter-end="opacity-100 translate-y-0"
                x-transition:leave="transition ease-out duration-300"
                x-transition:leave-start="opacity-100 translate-y-0"
                x-transition:leave-end="opacity-0 translate-y-3"
                x-show="{{ link_handle }}"
                @click.away="{{ link_handle }} = false"
                class="absolute z-10 -ml-5 mt-5 transform px-2 w-screen max-w-md sm:px-0 lg:ml-0 lg:left-1/2 lg:-translate-x-1/2"
              >
                <div class="shadow-lg border ring-black ring-opacity-5 overflow-hidden rounded-lg">
                  <div class="relative grid gap-6 bg-white px-5 py-6 sm:gap-8 sm:p-8">
                    {% for childlink in link.links %}
                      <a href="{{ childlink.url }}" class="-m-3 p-3 flex items start rounded-lg hover:bg-gray-100">
                        <div class="ml-4">
                          <p class="text-gray-900 text-base font-medium">
                            {{ childlink.title }}
                          </p>
                        </div>
                      </a>
                    {% endfor %}
                  </div>
                </div>
              </div>
            </div>
          {% else %}
            {% comment %} single menu item {% endcomment %}
            <a
              href="{{ link.url }}"
              class="text-base text-gray-500 hover:text-gray-900 {% if link.active == true %}text-green-500{% endif %}"
            >
              {{- link.title -}}
            </a>
          {% endif %}
        {% endfor %}
      </nav>

      <!-- CART BUTTON / ACCOUNT LINKS IF ENABLED -->
      <div class="hidden md:flex items-center justify-end md:flex-1 space-x-5">
        <!-- Search bar icon -->
        <button
          x-on:click="searchBarOpen = true"
          type="button"
          class="whitespace-nowrap text-base text-gray-500 hover:text-gray-900"
        >
          {% render 'icon-search' %}
        </button>

        <!-- default cart url -->
        <a href="{{ routes.cart_url }}" class="whitespace-nowrap text-base text-gray-500 hover:text-gray-900">
          {% render 'icon-shopping-bag' %}
        </a>

        <!-- get account urls and assign each url as needed -->
        {% if shop.customer_accounts_enabled %}
          {% if customer %}
            <a href="{{ routes.account_url }}" class="text-base text-gray-500 hover:text-gray-900">account</a>
            {{
              'Log out'
              | customer_logout_link
              | replace: '<a', '<a class="text-base text-gray-500 hover:text-gray-900"'
            }}
          {% else %}
            {{
              'Log in '
              | customer_login_link
              | replace: '<a', '<a class="text-base text-gray-500 hover:text-gray-900"'
            }}
            {{
              'Register'
              | customer_register_link
              | replace: '<a', '<a class="text-base text-gray-500 hover:text-gray-900"'
            }}
          {% endif %}
        {% endif %}
      </div>

      <!-- MOBILE MENU CONTAINER -->
      <div x-show="mobileMenuOpen" class="absolute z-10 top-0 inset-x-0 p-2 transform origin-top-left md:hidden">
        <div class="shadow-lg rounded-lg ring-1 ring-black ring-opacity-5 bg-white w-full">
          <div class="p-5 divide-y-2 divide-gray-50">
            <!-- MOBILE MENU HEADER TITLE PLUS CLOSE BUTTON -->

            <div class="flex items-center justify-between pb-3">
              <div>
                <h1 class="text-lg text-gray-500">{{ section.settings.mobile_menu_title }}</h1>
              </div>
              <div class="-mr-2">
                <button x-on:click="mobileMenuOpen = false" type="button" class="bg-white rounded-md p-2 text-gray-500">
                  {% render 'icon-close' %}
                </button>
              </div>
            </div>

            <!-- NAVIGATION LINKS FOR MOBILE MENU -->
            <div class="pt-3">
              <nav class="grid gap-y-7">
                {% for link in main_menu_linklist %}
                  {% if link.links != blank %}
                    {% assign mobile_link_handle = link.handle | replace: '-', '_' %}
                    <div class="relative" x-data="{ {{ mobile_link_handle }}: false }">
                      <button
                        x-on:click="{{ mobile_link_handle }} = ! {{ mobile_link_handle }}"
                        type="button"
                        class="text-base text-gray-500 hover:text-gray-900 flex items-center justify-between w-full"
                      >
                        <div>{{ link.title }}</div>
                        {% render 'icon-dropdown' %}
                      </button>

                      <div x-show="{{ mobile_link_handle }}" class="grid gap-y-7 py-3">
                        {% for childlink in link.links %}
                          <a
                            href="{{ childlink.url }}"
                            class="-m-3 p-3 mt-2 flex items-center rounded-md text-gray-500 hover:text-gray-900 hover:bg-gray-50"
                          >
                            <span class="ml-3 text-base font-medium text-gray-500">{{ childlink.title }}</span>
                          </a>
                        {% endfor %}
                      </div>
                    </div>
                  {% else %}
                    <a
                      href="{{ link.url }}"
                      class="-m-3 p-3 flex items-center rounded-md text-gray-500 hover:text-gray-900 hover:bg-gray-50"
                    >
                      {{ link.title }}
                    </a>
                  {% endif %}
                {% endfor %}
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- searchbar container -->
  <div x-show="searchBarOpen" class="w-full absolute top-0 bg-white border">
    <button type="button" x-on:click="searchBarOpen = false" class="absolute top-0 right-0 mr-5 mt-5 text-gray-500">
      {% render 'icon-close' %}
    </button>
    <div class="h-40 flex justify-center items-center">
      <form action="{{ routes.search_url }}" method="get" class="flex-auto">
        <div class="relative text-gray-500 px-10 border">
          <input
            type="search"
            name="q"
            placeholder="Search"
            class="w-full bg-white h-10 px-5 pr-10 rounded-full text-sm focus:outline-none"
          >
          <button type="submit" class="absolute right-0 top-0 mt-2 mr-2 md:mr-20">
            {% render 'icon-search' %}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

{% comment %} "name" defines the name of the section as it will appear in the Shopify theme editor's sidebar. When a merchant/user adds a section, they will see "Header" as an option. "settings" is an array (a list) that holds all the individual input fields or customization options for this "Header" section. Each object within this array defines one specific setting. {% endcomment %}
{% schema %}
{
  "name": "Header",
  "settings": [
    {
      "type": "text",
      "id": "mobile_menu_title",
      "default": "Menu",
      "label": "Mobile Menu Title"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "Heading Navigation Menu"
    }
  ]
}
{% endschema %}

{%- comment -%}
  What is a section schema?

  Basically, schema is a liquid tag that allows you to define or describe a section. It also allows you to reuse a section and customize the content of a section. You can also use schema tag to create blocks in a section. So if you have a section where you have to create multiple items in a list, then you can use blocks.

  You can only use one schema tag per section. And also you can only use JSON inside of the schema tag. JSON is JavaScript object notation where you can use attributes and apply values to this attributes. However, in Shopify liquid or in our case the schema tag, you can only use the following ten attributes.

  This are name, tag, class, limit, settings, blocks, max_blocks, presets, default and locales.

  There are two new attributes and that is the enabled_on and disabled_on. But I believe those are just optional. Now if you start using attributes outside of the following list or if you start using attributes that don't belong in this list, your schema is not going to work.
{%- endcomment -%}
